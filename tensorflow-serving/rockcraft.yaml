name: tensorflow-serving
summary: TensorFlow model server
description: Test
version: v2.6.2
license: Apache-2.0
base: ubuntu@20.04
run-user: _daemon_
services:
  serving:
    override: replace
    summary: "tensorflow model server"
    startup: enabled
    environment:
       NVIDIA_VISIBLE_DEVICES: all
       NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
       LD_LIBRARY_PATH: "/usr/local/nvidia/lib:/usr/local/nvidia/lib64"
    command: ""
platforms:
  amd64:


parts:
  security-team-requirement:
    plugin: nil
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query" && \
      dpkg-query -f '${db:Status-Abbrev},${binary:Package},${Version},${source:Package},${Source:Version}\n' -W) \
      > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query
      
  cuda-build:
    plugin: nil
    source: https://github.com/tensorflow/serving
    source-type: git
    source-tag: 2.6.2
    build-packages:
      - automake
      - build-essential
      - ca-certificates
      - curl 
      - git 
      - mlocate 
      - openjdk-8-jdk
      - openjdk-8-jre-headless 
      - pkg-config 
      - python-dev 
      - software-properties-common 
      - swig 
      - unzip 
      - wget 
      - zip 
      - zlib1g-dev 
      - python3-distutils 
      - python-distutils-extra
      - python3-pip
    build-environment:
      - CUDNN_VERSION: "8.1.0.77"
      - TF_TENSORRT_VERSION: "7.2.2"
      - CUDA: "11.2"
      - OLD_CUDA: "11.1"      
      - CUDA_LIB: "11-2"
      - LD_LIBRARY_PATH: "/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/usr/include/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
      - BAZEL_VERSION: 3.7.2
      - CI_BUILD_PYTHON: python
      - TF_NEED_CUDA: "1"
      - TF_NEED_TENSORRT: "1"
      - TENSORRT_INSTALL_PATH: /usr/lib/x86_64-linux-gnu
      - TF_CUDA_VERSION: "11.2"
      - TF_CUDNN_VERSION: "8"
      - TMP: /tmp
      - TF_SERVING_BUILD_OPTIONS: "--config=release"
    override-build: |
      set -xe

      curl -sL "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub" | apt-key add -
      echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" > /etc/apt/sources.list.d/cuda.list
      apt-get -yq update
      
      apt-get install -yq --no-install-recommends \
        cuda-command-line-tools-${CUDA_LIB} \
        libcublas-${CUDA_LIB} \
        libcublas-dev-${CUDA_LIB} \
        cuda-nvrtc-${CUDA_LIB} \
        cuda-nvrtc-dev-${CUDA_LIB} \
        cuda-nvprune-${CUDA_LIB} \
        cuda-cudart-dev-${CUDA_LIB} \
        libcufft-dev-${CUDA_LIB} \
        libcurand-dev-${CUDA_LIB} \
        libcusolver-dev-${CUDA_LIB} \
        libcusparse-dev-${CUDA_LIB} \
        libfreetype6-dev \
        libtool \
        libcudnn8=8.1.0.77-1+cuda${CUDA} \
        libcudnn8-dev=8.1.0.77-1+cuda${CUDA} \
        libcurl3-dev \
        libzmq3-dev \
	cuda-11-2

      apt-get clean
      rm -rf /var/lib/apt/lists/*

      # Install python3.6
      echo "deb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/deadsnakes-ubuntu-ppa.list

      apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776

      apt-get update
      apt-get install -yq python3.6 python3.6-dev python3.6-venv

      apt-get clean
      rm -rf /var/lib/apt/lists/*

      find /usr/local/cuda-11.2/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete
      rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v8.a

      # create Nvidia/CUDA directories
      mkdir -p "${CRAFT_PART_INSTALL}/usr/local" "${CRAFT_PART_INSTALL}/usr/local/bin"

      # copy CUDA directories
      cp -rp /usr/local/cuda-${CUDA} ${CRAFT_PART_INSTALL}/usr/local
      ln -sf /usr/local/cuda-${CUDA} ${CRAFT_PART_INSTALL}/usr/local/cuda

      # tensorflow fix - wrong libcuda lib path (+ reconfigure dynamic linker run-time bindings)
      # ln -s /usr/local/cuda/lib64/stubs/libcuda.so ${CRAFT_PART_INSTALL}/usr/local/cuda/lib64/stubs/libcuda.so.1
      # echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf
      # ldconfig

      # copy CUDA config
      # mkdir -p ${CRAFT_PART_INSTALL}/etc/ld.so.conf.d/
      # cp -r /etc/ld.so.conf.d/z-cuda-stubs.conf ${CRAFT_PART_INSTALL}/etc/ld.so.conf.d/z-cuda-stubs.conf

      # tensorflow fix - wrong libcusolver lib path
      # https://github.com/tensorflow/tensorflow/issues/43947#issuecomment-748273679
      # ln -s /usr/local/cuda-${CUDA}/targets/x86_64-linux/lib/libcusolver.so.11 ${CRAFT_PART_INSTALL}/usr/local/cuda-${CUDA}/targets/x86_64-linux/lib/libcusolver.so.10

      # tensorflow fix - some tensorflow tools expect a `python` binary
      # ln -s /usr/local/bin/python3 ${CRAFT_PART_INSTALL}/usr/local/bin/python

      # install - other nvidia stuff
      curl -sL "https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64/7fa2af80.pub" | apt-key add -
      echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu2004/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list
      echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list
      apt-get -yq update

      # NOTE: libnvinfer uses cuda11.1 versions
      apt-get install -y --no-install-recommends libnvinfer7=${TF_TENSORRT_VERSION}-1+cuda11.1 \
      libnvinfer-dev=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA} \
      libnvinfer-plugin-dev=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA} \
      libnvinfer-plugin7=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA} \
      libnvonnxparsers7=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA} \
      libnvparsers7=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA} \
      libnvonnxparsers-dev=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA} \
      libnvparsers-dev=${TF_TENSORRT_VERSION}-1+cuda${OLD_CUDA}
      
      apt-get clean
      rm -rf /var/lib/apt/lists/*

      # --- CUDA install END ---
      
      python3.6 -m pip install pip --upgrade      

      update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 0
      update-alternatives --install /usr/bin/python python /usr/bin/python3.6 0
      
      curl -fSsL -O "https://bootstrap.pypa.io/pip/3.6/get-pip.py"

      python3 get-pip.py

      rm get-pip.py

      pip3 --no-cache-dir install \
      future>=0.17.1 \
      grpcio \
      h5py \
      keras_applications>=1.0.8 \
      keras_preprocessing>=1.1.0 \
      mock \
      numpy \
      portpicker \
      requests \
      --ignore-installed six>=1.12.0

      mkdir ./bazel

      cd bazel/
      
      curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
      
      curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE

      chmod +x bazel-*.sh

      ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh

      cd ..

      rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

      # Fix paths so that CUDNN can be found: https://github.com/tensorflow/tensorflow/issues/8264
      mkdir /usr/lib/x86_64-linux-gnu/include/
      ln -s /usr/include/cudnn.h /usr/local/cuda-${CUDA}/include/cudnn.h
      ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda-${CUDA}/lib64/libcudnn.so
      ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.${TF_CUDNN_VERSION} /usr/local/cuda-${CUDA}/lib64/libcudnn.so.${TF_CUDNN_VERSION}

      export TF_NCCL_VERSION=

      cd ./tensorflow_serving

      export TF_SERVING_BAZEL_OPTIONS=""

      ln -s /usr/local/cuda-${CUDA}/lib64/stubs/libcuda.so /usr/local/cuda-${CUDA}/lib64/stubs/libcuda.so.1
      
      LD_LIBRARY_PATH=/usr/local/cuda-${CUDA}/lib64/stubs:${LD_LIBRARY_PATH} \
      bazel build --color=yes --curses=yes --config=cuda --copt="-fPIC" \
      ${TF_SERVING_BAZEL_OPTIONS} \
      --verbose_failures \
      --output_filter=DONT_MATCH_ANYTHING \
      ${TF_SERVING_BUILD_OPTIONS} \
      tensorflow_serving/model_servers:tensorflow_model_server

      cp bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server ${CRAFT_PART_INSTALL}/usr/local/bin/

      rm /usr/local/cuda/lib64/stubs/libcuda.so.1

      # Clean build
      bazel clean --expunge --color=yes
      rm -rf /root/.cache      

